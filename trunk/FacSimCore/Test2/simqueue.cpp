// Class automatically generated by Dev-C++ New Class wizard
#include <iostream> 
#include "simpart.h" 
#include "simqueue.h" // class's header file

#include "global.h"

#include "simmodel.h"
extern simModel theModel;

// class constructor
simQueue::simQueue()
{
	// insert your code here
	theObjectType=QUEUE_TYPE; 
	for(int i=0;i<QUEUE_LENGTH_MAX;i++)
    {
        content[i]=(simPart *)NULL;
    }
    nowIn=0;
    Capacity=10;//default 
}

// class destructor
simQueue::~simQueue()
{
	// insert your code here
}
simQueue::simQueue(int Capa)
{
    for(int i=0;i<QUEUE_LENGTH_MAX;i++)
    {
        content[i]=(simPart *)NULL;         
    } 
    nowIn=0;
    Capacity= Capa; 
} 

simPart* simQueue::GivePart()
{
    //从缓冲区中抽取零件的方式/策略
    //第一种，先到先取
    if(1==PULL_TYPE){ 
        if(nowIn<=0){return (simPart*)NULL;}
        else{
            simPart* aP=content[0];
            printf("Que Content[0] part type=%d target=%d\n",content[0]->PartType,content[0]->ToBePartType);
            for(int i=0;i<nowIn-1;i++){
                //向前移位
                content[i]=content[i+1]; 
            }
            content[nowIn-1]=(simPart*)NULL;
             
            if(aP!=(simPart*)NULL){
                //此处添加“向事件表添加事件”的语句：PartOut事件 
                nowIn--;
            }
            
            printf("Queue content part type=%d,taget=%d\n",aP->PartType,aP->ToBePartType);
            return aP; 
        } 
    } 
    ///第二种，抽取优先级最高的
    else{ 
        if(nowIn<=0){return (simPart*)NULL;}
        else{
            //寻找content中优先级最高的
            int k=0;
            int rs=0;
            int PP=9999; 
            for(;k<nowIn;k++)
            {
                if(content[k]->Priority<PP){
                    PP=content[k]->Priority;
                    rs=k;
                } 
            }
            simPart* aP2=(simPart*)NULL;
            if(rs<nowIn){aP2=content[rs];}
            //
            for(k=rs;k<nowIn-1;k++){
                //向前移位k
                content[k]=content[k+1];
            }
            content[nowIn-1]=(simPart*)NULL;
            
            if(aP2!=(simPart*)NULL){
                //此处添加“向事件表添加事件”的语句：PartOut事件
                nowIn--;
            }
            return aP2; 
        }
    } 
} 

bool simQueue::canIn()
{
    if(nowIn<Capacity)return true;
    else return false;
}
bool simQueue::canOut()
{
    if(nowIn>0)return true;
    else return false;
}

bool simQueue::setCapacity(int capa)
{
    Capacity=capa; 
} 

bool simQueue::GetPart(simPart *aPart)
{
    if(content[nowIn]==(simPart*)NULL)
    { 
        
        content[nowIn]=aPart;
        nowIn++;
        printf("Queue[%d] getPart OK. Now %d Parts in.\n",InstanceNum,nowIn);
        return true; 
    } 
    else{
        printf("Queue Error: \n %d Parts in Queue,but the Last position is Occupied.\n",nowIn); 
        return false; 
    } 
} 

bool simQueue::showContent()
{
    int i;
    printf("\nQueue[%d] \n",InstanceNum);
    printf("   Pos    Type     Target\n") ; 
    printf("-----------------------------\n") ;
    for(i=0;i<nowIn;i++){
        printf("\t%d\t%d\t%d\n",i,content[i]->PartType,content[i]->ToBePartType) ; 
    } 
    printf("-----------------------------\n") ;
    return true; 
} 



